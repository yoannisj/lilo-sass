// =============================================================================
// =LILO - REPORT
// =============================================================================
//// Extend styles that were added before.
////
//// @group lilo-share
//// @author [Yoannis Jamar](http://yoannis.me)

@import "aleksi/lists/implode";
@import "lilo/settings";

$__lilo-unfound__: () !default;
$__lilo-overuses__: () !default;

// =FUNCTIONS
// =============================================================================

// =lilo-report-unfound($identifier[, $selector ])
// -----------------------------------------------------------------------------
///
/// @access public
/// @since 0.2.0

@function lilo-report-unfound($identifier, $selector: &)
{
  // add given identifier to list of unfound ones
  $unfound: default-to(map-get($__lilo-unfound__, $identifier), ());
  $unfound: append($unfound, $selector);
  $__lilo-unfound__: map-set($__lilo-unfound__, $identifier, $unfound) !global;

  // use adequate reporting method
  @if $lilo-strict-mode or $lilo-report-method == 'error' {
   // throw error
    $res: throw-error('lilo-use():: Impossible to find styles for #{inspect($identifier)}, used by #{$selector}'); 
  }

  @else if $lilo-report-method == 'warn' {
    // throw warning
    $res: throw-warning('lilo-use():: Impossible to find styles for #{inspect($identifier)}, used by #{$selector}'); 
  }

  @return $selector;
}

// =lilo-report-overuse($identifier[, $selector ])
// -----------------------------------------------------------------------------
///
/// @access public
/// @since 0.2.0

@function lilo-report-overuse($identifier, $selector: &)
{
  // add given selector to list of overuses for given identifier
  // - include 'lilo-report-summary' at the very end to effectively report
  $overuses: default-to(map-get($__lilo-overuses__, $identifier), ());
  $overuses: append($overuses, $selector);
  $__lilo-overuses__: map-set($__lilo-overuses__, $identifier, $overuses) !global;

  // use adequate reporting method
  @if $lilo-strict-mode or $lilo-report-method == 'error' {
   // throw error
    $res: throw-error('lilo-use():: Usage quota for #{inspect($identifier)} exceeded by #{$selector}'); 
  }

  @else if $lilo-report-method == 'warn' {
    // throw warning
    $res: throw-warning('lilo-use():: Usage quota for #{inspect($identifier)} exceeded by #{$selector}');
  }

  @return $selector;
}

// =MIXINS
// =============================================================================

// =lilo-report-unfound($identifier[, $selector ])
// -----------------------------------------------------------------------------
///
/// @see lilo-report-unfound
///
/// @access public
/// @since 0.2.0

@mixin lilo-report-unfound($identifier, $selector: &) {
  $unfound: lilo-report-unfound($identifier, $selector);
}

// =lilo-report-overuse($identifier[, $selector ])
// -----------------------------------------------------------------------------
///
/// @see lilo-report-overuse
///
/// @access public
/// @since 0.2.0

@mixin lilo-report-overuse($identifier, $selector: &) {
  $overuses: lilo-report-overuse($identifier, $selector);
}

// =lilo-report-summary()
// -----------------------------------------------------------------------------
///
/// @access public
/// @since 0.2.0

@mixin lilo-report-summary()
{
  // summary header
  @debug 'LILO SUMMARY::';
  @debug '==============';
  @debug '';

  @if length($__lilo-unfound__) > 0
  {
    // summary of reported unfound styles
    @debug '#{length($__lilo-unfound__)} used style(s) could not be found:';
    @each $identifier, $selectors in $__lilo-unfound__ {
      @debug '- #{$identifier} => #{implode($selectors, "|")}';
    }
    @debug '';
  }

  @if length($__lilo-overuses__) > 0
  {
    // summary of reported overused styles
    @debug '#{length($__lilo-unfound__)} style(s) used more then quotas allow:';
    @each $identifier, $selectors in $__lilo-overuses__ {
      @debug '- #{$identifier} => #{implode($selectors, "|")}';
    }
    @debug '';
  }
}